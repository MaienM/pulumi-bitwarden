// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AttachmentArgs, AttachmentState } from "./attachment";
export type Attachment = import("./attachment").Attachment;
export const Attachment: typeof import("./attachment").Attachment = null as any;
utilities.lazyLoad(exports, ["Attachment"], () => require("./attachment"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { GetAttachmentArgs, GetAttachmentResult, GetAttachmentOutputArgs } from "./getAttachment";
export const getAttachment: typeof import("./getAttachment").getAttachment = null as any;
export const getAttachmentOutput: typeof import("./getAttachment").getAttachmentOutput = null as any;
utilities.lazyLoad(exports, ["getAttachment","getAttachmentOutput"], () => require("./getAttachment"));

export { GetItemLoginArgs, GetItemLoginResult, GetItemLoginOutputArgs } from "./getItemLogin";
export const getItemLogin: typeof import("./getItemLogin").getItemLogin = null as any;
export const getItemLoginOutput: typeof import("./getItemLogin").getItemLoginOutput = null as any;
utilities.lazyLoad(exports, ["getItemLogin","getItemLoginOutput"], () => require("./getItemLogin"));

export { GetItemSecureNoteArgs, GetItemSecureNoteResult, GetItemSecureNoteOutputArgs } from "./getItemSecureNote";
export const getItemSecureNote: typeof import("./getItemSecureNote").getItemSecureNote = null as any;
export const getItemSecureNoteOutput: typeof import("./getItemSecureNote").getItemSecureNoteOutput = null as any;
utilities.lazyLoad(exports, ["getItemSecureNote","getItemSecureNoteOutput"], () => require("./getItemSecureNote"));

export { ItemLoginArgs, ItemLoginState } from "./itemLogin";
export type ItemLogin = import("./itemLogin").ItemLogin;
export const ItemLogin: typeof import("./itemLogin").ItemLogin = null as any;
utilities.lazyLoad(exports, ["ItemLogin"], () => require("./itemLogin"));

export { ItemSecureNoteArgs, ItemSecureNoteState } from "./itemSecureNote";
export type ItemSecureNote = import("./itemSecureNote").ItemSecureNote;
export const ItemSecureNote: typeof import("./itemSecureNote").ItemSecureNote = null as any;
utilities.lazyLoad(exports, ["ItemSecureNote"], () => require("./itemSecureNote"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "bitwarden:index/attachment:Attachment":
                return new Attachment(name, <any>undefined, { urn })
            case "bitwarden:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "bitwarden:index/itemLogin:ItemLogin":
                return new ItemLogin(name, <any>undefined, { urn })
            case "bitwarden:index/itemSecureNote:ItemSecureNote":
                return new ItemSecureNote(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("bitwarden", "index/attachment", _module)
pulumi.runtime.registerResourceModule("bitwarden", "index/folder", _module)
pulumi.runtime.registerResourceModule("bitwarden", "index/itemLogin", _module)
pulumi.runtime.registerResourceModule("bitwarden", "index/itemSecureNote", _module)
pulumi.runtime.registerResourcePackage("bitwarden", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:bitwarden") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
